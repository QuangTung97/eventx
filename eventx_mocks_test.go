// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package eventx

import (
	"context"
	"sync"
	"time"
)

// Ensure, that RepositoryMock does implement Repository.
// If this is not the case, regenerate this file with moq.
var _ Repository = &RepositoryMock{}

// RepositoryMock is a mock implementation of Repository.
//
// 	func TestSomethingThatUsesRepository(t *testing.T) {
//
// 		// make and configure a mocked Repository
// 		mockedRepository := &RepositoryMock{
// 			GetEventsFromFunc: func(ctx context.Context, from uint64, limit uint64) ([]Event, error) {
// 				panic("mock out the GetEventsFrom method")
// 			},
// 			GetLastEventsFunc: func(ctx context.Context, limit uint64) ([]Event, error) {
// 				panic("mock out the GetLastEvents method")
// 			},
// 			GetUnprocessedEventsFunc: func(ctx context.Context, limit uint64) ([]Event, error) {
// 				panic("mock out the GetUnprocessedEvents method")
// 			},
// 			UpdateSequencesFunc: func(ctx context.Context, events []Event) error {
// 				panic("mock out the UpdateSequences method")
// 			},
// 		}
//
// 		// use mockedRepository in code that requires Repository
// 		// and then make assertions.
//
// 	}
type RepositoryMock struct {
	// GetEventsFromFunc mocks the GetEventsFrom method.
	GetEventsFromFunc func(ctx context.Context, from uint64, limit uint64) ([]Event, error)

	// GetLastEventsFunc mocks the GetLastEvents method.
	GetLastEventsFunc func(ctx context.Context, limit uint64) ([]Event, error)

	// GetUnprocessedEventsFunc mocks the GetUnprocessedEvents method.
	GetUnprocessedEventsFunc func(ctx context.Context, limit uint64) ([]Event, error)

	// UpdateSequencesFunc mocks the UpdateSequences method.
	UpdateSequencesFunc func(ctx context.Context, events []Event) error

	// calls tracks calls to the methods.
	calls struct {
		// GetEventsFrom holds details about calls to the GetEventsFrom method.
		GetEventsFrom []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// From is the from argument value.
			From uint64
			// Limit is the limit argument value.
			Limit uint64
		}
		// GetLastEvents holds details about calls to the GetLastEvents method.
		GetLastEvents []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Limit is the limit argument value.
			Limit uint64
		}
		// GetUnprocessedEvents holds details about calls to the GetUnprocessedEvents method.
		GetUnprocessedEvents []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Limit is the limit argument value.
			Limit uint64
		}
		// UpdateSequences holds details about calls to the UpdateSequences method.
		UpdateSequences []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Events is the events argument value.
			Events []Event
		}
	}
	lockGetEventsFrom        sync.RWMutex
	lockGetLastEvents        sync.RWMutex
	lockGetUnprocessedEvents sync.RWMutex
	lockUpdateSequences      sync.RWMutex
}

// GetEventsFrom calls GetEventsFromFunc.
func (mock *RepositoryMock) GetEventsFrom(ctx context.Context, from uint64, limit uint64) ([]Event, error) {
	if mock.GetEventsFromFunc == nil {
		panic("RepositoryMock.GetEventsFromFunc: method is nil but Repository.GetEventsFrom was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		From  uint64
		Limit uint64
	}{
		Ctx:   ctx,
		From:  from,
		Limit: limit,
	}
	mock.lockGetEventsFrom.Lock()
	mock.calls.GetEventsFrom = append(mock.calls.GetEventsFrom, callInfo)
	mock.lockGetEventsFrom.Unlock()
	return mock.GetEventsFromFunc(ctx, from, limit)
}

// GetEventsFromCalls gets all the calls that were made to GetEventsFrom.
// Check the length with:
//     len(mockedRepository.GetEventsFromCalls())
func (mock *RepositoryMock) GetEventsFromCalls() []struct {
	Ctx   context.Context
	From  uint64
	Limit uint64
} {
	var calls []struct {
		Ctx   context.Context
		From  uint64
		Limit uint64
	}
	mock.lockGetEventsFrom.RLock()
	calls = mock.calls.GetEventsFrom
	mock.lockGetEventsFrom.RUnlock()
	return calls
}

// GetLastEvents calls GetLastEventsFunc.
func (mock *RepositoryMock) GetLastEvents(ctx context.Context, limit uint64) ([]Event, error) {
	if mock.GetLastEventsFunc == nil {
		panic("RepositoryMock.GetLastEventsFunc: method is nil but Repository.GetLastEvents was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Limit uint64
	}{
		Ctx:   ctx,
		Limit: limit,
	}
	mock.lockGetLastEvents.Lock()
	mock.calls.GetLastEvents = append(mock.calls.GetLastEvents, callInfo)
	mock.lockGetLastEvents.Unlock()
	return mock.GetLastEventsFunc(ctx, limit)
}

// GetLastEventsCalls gets all the calls that were made to GetLastEvents.
// Check the length with:
//     len(mockedRepository.GetLastEventsCalls())
func (mock *RepositoryMock) GetLastEventsCalls() []struct {
	Ctx   context.Context
	Limit uint64
} {
	var calls []struct {
		Ctx   context.Context
		Limit uint64
	}
	mock.lockGetLastEvents.RLock()
	calls = mock.calls.GetLastEvents
	mock.lockGetLastEvents.RUnlock()
	return calls
}

// GetUnprocessedEvents calls GetUnprocessedEventsFunc.
func (mock *RepositoryMock) GetUnprocessedEvents(ctx context.Context, limit uint64) ([]Event, error) {
	if mock.GetUnprocessedEventsFunc == nil {
		panic("RepositoryMock.GetUnprocessedEventsFunc: method is nil but Repository.GetUnprocessedEvents was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Limit uint64
	}{
		Ctx:   ctx,
		Limit: limit,
	}
	mock.lockGetUnprocessedEvents.Lock()
	mock.calls.GetUnprocessedEvents = append(mock.calls.GetUnprocessedEvents, callInfo)
	mock.lockGetUnprocessedEvents.Unlock()
	return mock.GetUnprocessedEventsFunc(ctx, limit)
}

// GetUnprocessedEventsCalls gets all the calls that were made to GetUnprocessedEvents.
// Check the length with:
//     len(mockedRepository.GetUnprocessedEventsCalls())
func (mock *RepositoryMock) GetUnprocessedEventsCalls() []struct {
	Ctx   context.Context
	Limit uint64
} {
	var calls []struct {
		Ctx   context.Context
		Limit uint64
	}
	mock.lockGetUnprocessedEvents.RLock()
	calls = mock.calls.GetUnprocessedEvents
	mock.lockGetUnprocessedEvents.RUnlock()
	return calls
}

// UpdateSequences calls UpdateSequencesFunc.
func (mock *RepositoryMock) UpdateSequences(ctx context.Context, events []Event) error {
	if mock.UpdateSequencesFunc == nil {
		panic("RepositoryMock.UpdateSequencesFunc: method is nil but Repository.UpdateSequences was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Events []Event
	}{
		Ctx:    ctx,
		Events: events,
	}
	mock.lockUpdateSequences.Lock()
	mock.calls.UpdateSequences = append(mock.calls.UpdateSequences, callInfo)
	mock.lockUpdateSequences.Unlock()
	return mock.UpdateSequencesFunc(ctx, events)
}

// UpdateSequencesCalls gets all the calls that were made to UpdateSequences.
// Check the length with:
//     len(mockedRepository.UpdateSequencesCalls())
func (mock *RepositoryMock) UpdateSequencesCalls() []struct {
	Ctx    context.Context
	Events []Event
} {
	var calls []struct {
		Ctx    context.Context
		Events []Event
	}
	mock.lockUpdateSequences.RLock()
	calls = mock.calls.UpdateSequences
	mock.lockUpdateSequences.RUnlock()
	return calls
}

// Ensure, that TimerMock does implement Timer.
// If this is not the case, regenerate this file with moq.
var _ Timer = &TimerMock{}

// TimerMock is a mock implementation of Timer.
//
// 	func TestSomethingThatUsesTimer(t *testing.T) {
//
// 		// make and configure a mocked Timer
// 		mockedTimer := &TimerMock{
// 			ChanFunc: func() <-chan time.Time {
// 				panic("mock out the Chan method")
// 			},
// 			ResetFunc: func()  {
// 				panic("mock out the Reset method")
// 			},
// 			ResetAfterChanFunc: func()  {
// 				panic("mock out the ResetAfterChan method")
// 			},
// 		}
//
// 		// use mockedTimer in code that requires Timer
// 		// and then make assertions.
//
// 	}
type TimerMock struct {
	// ChanFunc mocks the Chan method.
	ChanFunc func() <-chan time.Time

	// ResetFunc mocks the Reset method.
	ResetFunc func()

	// ResetAfterChanFunc mocks the ResetAfterChan method.
	ResetAfterChanFunc func()

	// calls tracks calls to the methods.
	calls struct {
		// Chan holds details about calls to the Chan method.
		Chan []struct {
		}
		// Reset holds details about calls to the Reset method.
		Reset []struct {
		}
		// ResetAfterChan holds details about calls to the ResetAfterChan method.
		ResetAfterChan []struct {
		}
	}
	lockChan           sync.RWMutex
	lockReset          sync.RWMutex
	lockResetAfterChan sync.RWMutex
}

// Chan calls ChanFunc.
func (mock *TimerMock) Chan() <-chan time.Time {
	if mock.ChanFunc == nil {
		panic("TimerMock.ChanFunc: method is nil but Timer.Chan was just called")
	}
	callInfo := struct {
	}{}
	mock.lockChan.Lock()
	mock.calls.Chan = append(mock.calls.Chan, callInfo)
	mock.lockChan.Unlock()
	return mock.ChanFunc()
}

// ChanCalls gets all the calls that were made to Chan.
// Check the length with:
//     len(mockedTimer.ChanCalls())
func (mock *TimerMock) ChanCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockChan.RLock()
	calls = mock.calls.Chan
	mock.lockChan.RUnlock()
	return calls
}

// Reset calls ResetFunc.
func (mock *TimerMock) Reset() {
	if mock.ResetFunc == nil {
		panic("TimerMock.ResetFunc: method is nil but Timer.Reset was just called")
	}
	callInfo := struct {
	}{}
	mock.lockReset.Lock()
	mock.calls.Reset = append(mock.calls.Reset, callInfo)
	mock.lockReset.Unlock()
	mock.ResetFunc()
}

// ResetCalls gets all the calls that were made to Reset.
// Check the length with:
//     len(mockedTimer.ResetCalls())
func (mock *TimerMock) ResetCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockReset.RLock()
	calls = mock.calls.Reset
	mock.lockReset.RUnlock()
	return calls
}

// ResetAfterChan calls ResetAfterChanFunc.
func (mock *TimerMock) ResetAfterChan() {
	if mock.ResetAfterChanFunc == nil {
		panic("TimerMock.ResetAfterChanFunc: method is nil but Timer.ResetAfterChan was just called")
	}
	callInfo := struct {
	}{}
	mock.lockResetAfterChan.Lock()
	mock.calls.ResetAfterChan = append(mock.calls.ResetAfterChan, callInfo)
	mock.lockResetAfterChan.Unlock()
	mock.ResetAfterChanFunc()
}

// ResetAfterChanCalls gets all the calls that were made to ResetAfterChan.
// Check the length with:
//     len(mockedTimer.ResetAfterChanCalls())
func (mock *TimerMock) ResetAfterChanCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockResetAfterChan.RLock()
	calls = mock.calls.ResetAfterChan
	mock.lockResetAfterChan.RUnlock()
	return calls
}
